namespace Leetcode.Roadmap_Workthrough.Array_Strings;

public class MinSwapsToMakeSequenceIncreasing
{
    /// <summary>
    /// üîé Classification:
    ///     - Category: Dynamic Programming (optimized to Greedy-style)
    ///     - Pattern: Greedy + Reach Tracking (–∏–ª–∏ DP —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–æ O(1) –ø–∞–º—è—Ç–∏)
    ///
    /// üß† Explanation:
    ///     - –£ –Ω–∞—Å –µ—Å—Ç—å –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã: nums1 –∏ nums2.
    ///     - –ù–∞ –∫–∞–∂–¥–æ–º –∏–Ω–¥–µ–∫—Å–µ –º–æ–∂–Ω–æ –ª–∏–±–æ –æ—Å—Ç–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∫ –µ—Å—Ç—å, –ª–∏–±–æ –ø–æ–º–µ–Ω—è—Ç—å –∏—Ö –º–µ—Å—Ç–∞–º–∏ (swap).
    ///     - –¶–µ–ª—å ‚Äî —Å–¥–µ–ª–∞—Ç—å –æ–±–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏–º–∏ –ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —á–∏—Å–ª–µ swap-–æ–≤.
    ///
    /// üß© –ò–¥–µ—è:
    ///     - –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
    ///         - `keep` ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ swap-–æ–≤, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –º–µ–Ω—è–ª–∏
    ///         - `swap` ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ swap-–æ–≤, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–º–µ–Ω—è–ª–∏
    ///     - –ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º:
    ///         - –º–æ–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å (canKeep)
    ///         - –º–æ–∂–Ω–æ –ª–∏ –ø–æ–º–µ–Ω—è—Ç—å (canSwap)
    ///     - –û–±–Ω–æ–≤–ª—è–µ–º `keep` –∏ `swap`, –º–∏–Ω–∏–º–∏–∑–∏—Ä—É—è –∑–Ω–∞—á–µ–Ω–∏—è
    ///
    /// ‚è± Time Complexity: O(n)
    /// üì¶ Space Complexity: O(1)
    /// </summary>
    public int MinSwap(int[] nums1, int[] nums2) {
        int keep = 0, swap = 1;
        int n = nums1.Length;
        for (int i = 0; i < n - 1; i++)
        {
            bool canKeep = nums1[i + 1] > nums1[i] && nums2[i + 1] > nums2[i];
            bool canSwap = nums1[i + 1] > nums2[i] && nums2[i + 1] > nums1[i];
           
            int nextKeep = int.MaxValue;
            int nextSwap = int.MaxValue;
            
            if (canKeep)
            {
                nextKeep = Math.Min(nextKeep, keep);
                nextSwap = Math.Min(nextSwap, swap + 1);
            }
            
            if (canSwap)
            {
                nextKeep = Math.Min(nextKeep, swap);
                nextSwap = Math.Min(nextSwap, keep + 1);
            }

            keep = nextKeep;
            swap = nextSwap;
        }

        return Math.Min(keep, swap);
    }
}