namespace Leetcode.Easy.Strings;

public class BackspaceStringCompare
{
    public bool BackspaceCompare(string s, string t) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –∫–æ–Ω–µ—Ü –æ–±–µ–∏—Ö —Å—Ç—Ä–æ–∫
        int i = s.Length - 1;
        int j = t.Length - 1;

        // –ü–æ–∫–∞ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–µ –¥–æ—à—ë–ª –¥–æ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
        while (i >= 0 || j >= 0) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–º–≤–æ–ª—ã, "—É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã–µ" —Å –ø–æ–º–æ—â—å—é `#`
            NextValidChar(s, ref i);
            NextValidChar(t, ref j);

            // –ï—Å–ª–∏ –æ–±–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å ‚Üí —Å—Ç—Ä–æ–∫–∏ —Ä–∞–≤–Ω—ã
            if (i == -1 && j == -1) return true;

            // –ï—Å–ª–∏ –æ–¥–∏–Ω —É–∫–∞–∑–∞—Ç–µ–ª—å –¥–æ—à—ë–ª –¥–æ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏, –∞ –¥—Ä—É–≥–æ–π ‚Äî –Ω–µ—Ç ‚Üí –Ω–µ —Ä–∞–≤–Ω—ã
            if (i == -1 || j == -1) return false;

            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–µ "–∂–∏–≤—ã–µ" —Å–∏–º–≤–æ–ª—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Üí —Å—Ç—Ä–æ–∫–∏ –Ω–µ —Ä–∞–≤–Ω—ã
            if (s[i] != t[j]) return false;

            // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî –¥–≤–∏–≥–∞–µ–º –æ–±–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è –≤–ª–µ–≤–æ
            i--;
            j--;
        }

        // –ï—Å–ª–∏ —Å—Ä–∞–≤–Ω–∏–ª–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –±–µ–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
        return true;

        // üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∏—â–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π "–∂–∏–≤–æ–π" —Å–∏–º–≤–æ–ª –≤ —Å—Ç—Ä–æ–∫–µ
        void NextValidChar(string s, ref int index) {
            bool found = false;
            int skip = 0;

            // –î–≤–∏–≥–∞–µ–º—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∫ –Ω–∞—á–∞–ª—É
            for (int i = index; i >= 0; i--) {
                if (s[i] == '#') {
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                    skip++;
                } else {
                    if (skip > 0) {
                        // –¢–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–º `#`
                        skip--;
                    } else {
                        // –≠—Ç–æ "–∂–∏–≤–æ–π" —Å–∏–º–≤–æ–ª ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é
                        index = i;
                        found = true;
                        break;
                    }
                }
            }

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ "–∂–∏–≤–æ–≥–æ" —Å–∏–º–≤–æ–ª–∞ ‚Äî –æ–±–æ–∑–Ω–∞—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if (!found) index = -1;
        }
    }

}