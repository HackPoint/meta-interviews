namespace Leetcode.Medium.Arrays.Math;

public class NextPermutations {
    
    /*
     *
     *nums = [1, 2, 3]
         ‚Üí pivot = 1 (nums[1] < nums[2])
         ‚Üí swap 2 <-> 3
         ‚Üí reverse [2] ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [1, 3, 2]
     * 
     */
    public void NextPermutation(int[] nums) {
        int n = nums.Length;
        int pivotIndex = -1;

        // üîπ 1. –ù–∞–π—Ç–∏ pivot ‚Äî –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—å—à–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                pivotIndex = i;
                break;
            }
        }

        // üîπ 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω pivot ‚Äî –º–∞—Å—Å–∏–≤ —É–∂–µ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–µ
        if (pivotIndex == -1) {
            Array.Reverse(nums);
            return;
        }

        // üîπ 3. –ù–∞–π—Ç–∏ –Ω–∞–∏–º–µ–Ω—å—à–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø—Ä–∞–≤–∞, –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª—å—à–µ pivot
        for (int j = n - 1; j > pivotIndex; j--) {
            if (nums[j] > nums[pivotIndex]) {
                // üîÑ –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏
                (nums[j], nums[pivotIndex]) = (nums[pivotIndex], nums[j]);
                break;
            }
        }

        // üîπ 4. –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –≤—Å—ë –ø–æ—Å–ª–µ pivot, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
        Array.Reverse(nums, pivotIndex + 1, n - pivotIndex - 1);
    }
}